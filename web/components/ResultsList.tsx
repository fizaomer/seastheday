'use client'

import { motion } from 'framer-motion'
import { BeachWindow } from '@/types'
import { Sun, Wind, Cloud, Thermometer, RefreshCw, Calendar } from 'lucide-react'

interface ResultsListProps {
  windows: BeachWindow[]
  loading: boolean
  error: string | null
  onRetry: () => void
  location?: { name?: string; lat: number; lon: number } | null
}

export default function ResultsList({ windows, loading, error, onRetry, location }: ResultsListProps) {
  // Find the closest beach to the current location
  const getClosestBeachName = () => {
    if (!location) return 'current location'
    
    // Beach locations organized by region
    const BEACH_REGIONS = {
      'bay-area': [
        { name: 'ocean beach', lat: 37.7594, lon: -122.5101 },
        { name: 'baker beach', lat: 37.7936, lon: -122.4836 },
        { name: 'stinson beach', lat: 38.1994, lon: -122.6447 },
        { name: 'half moon bay', lat: 37.4636, lon: -122.4286 },
        { name: 'pacifica state beach', lat: 37.6208, lon: -122.4908 },
        { name: 'muir beach', lat: 37.8619, lon: -122.5764 },
        { name: 'rodeo beach', lat: 37.8322, lon: -122.5381 },
        { name: 'cowell beach', lat: 36.9511, lon: -122.0264 },
        { name: 'natural bridges', lat: 36.9506, lon: -122.0603 },
        { name: 'capitola beach', lat: 36.9714, lon: -121.9514 },
      ],
      'socal': [
        { name: 'santa monica beach', lat: 34.0195, lon: -118.4912 },
        { name: 'venice beach', lat: 33.9850, lon: -118.4695 },
        { name: 'malibu beach', lat: 34.0259, lon: -118.7798 },
        { name: 'huntington beach', lat: 33.6595, lon: -117.9988 },
        { name: 'laguna beach', lat: 33.5427, lon: -117.7854 },
      ],
      'central-coast': [
        { name: 'pismo beach', lat: 35.1428, lon: -120.6413 },
        { name: 'morro bay', lat: 35.3658, lon: -120.8499 },
        { name: 'cayucos state beach', lat: 35.4428, lon: -120.9056 },
        { name: 'avila beach', lat: 35.1803, lon: -120.7311 },
        { name: 'carpinteria state beach', lat: 34.3908, lon: -119.5181 },
      ]
    }

    // Function to determine region based on coordinates
    const getRegionFromCoords = (lat: number, lon: number) => {
      if (lat > 37) return 'bay-area'
      if (lat > 34) return 'central-coast'
      return 'socal'
    }

    // Haversine formula to calculate distance between two lat/lon points
    const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number) => {
      const R = 3958.8 // Radius of Earth in miles
      const dLat = (lat2 - lat1) * Math.PI / 180
      const dLon = (lon2 - lon1) * Math.PI / 180
      const a = 
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2)
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))
      return R * c
    }

    const region = getRegionFromCoords(location.lat, location.lon)
    const nearbyBeaches = BEACH_REGIONS[region] || BEACH_REGIONS['socal']
    
    // Find closest beach
    let closestBeach = nearbyBeaches[0]
    let minDistance = calculateDistance(location.lat, location.lon, closestBeach.lat, closestBeach.lon)
    
    for (const beach of nearbyBeaches) {
      const distance = calculateDistance(location.lat, location.lon, beach.lat, beach.lon)
      if (distance < minDistance) {
        minDistance = distance
        closestBeach = beach
      }
    }
    
    return closestBeach.name
  }

  const formatTime = (isoString: string) => {
    return new Date(isoString).toLocaleTimeString('en-US', {
      hour: 'numeric',
      minute: '2-digit',
      hour12: true,
    }).toLowerCase()
  }

  const formatDate = (isoString: string) => {
    return new Date(isoString).toLocaleDateString('en-US', {
      weekday: 'short',
      month: 'short',
      day: 'numeric',
    }).toLowerCase()
  }

  const getScoreColor = (score: number) => {
    if (score >= 8) return 'text-accent'
    if (score >= 6) return 'text-warn'
    return 'text-subtext'
  }

  const getWeatherIcon = (cloudPct: number, tempF: number) => {
    if (cloudPct < 20) return '‚òÄÔ∏è'
    if (cloudPct < 60) return '‚õÖ'
    return '‚òÅÔ∏è'
  }

  const addToGoogleCalendar = (window: BeachWindow, beachName: string) => {
    const startDate = new Date(window.start)
    const endDate = new Date(window.end)
    
    // Format dates for Google Calendar
    const formatDate = (date: Date) => {
      return date.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z'
    }
    
    const startTime = formatDate(startDate)
    const endTime = formatDate(endDate)
    
    // Create event details
    const eventTitle = `üèñÔ∏è Beach Time - ${beachName}`
    const eventDescription = `Perfect beach conditions!
    
Weather: ${window.summary.tempF}¬∞F, ${window.summary.cloudPct}% clouds
Wind: ${window.summary.windMph} mph
UV Index: ${window.summary.uv}
Precipitation: ${window.summary.cloudPct}%

Generated by Seas the Day üåä`
    
    // Create Google Calendar URL
    const googleCalendarUrl = `https://calendar.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(eventTitle)}&dates=${startTime}/${endTime}&details=${encodeURIComponent(eventDescription)}&location=${encodeURIComponent(beachName)}&sf=true&output=xml`
    
    // Open in new tab
    if (typeof window !== 'undefined') {
      // Create a temporary link element and click it
      const link = document.createElement('a')
      link.href = googleCalendarUrl
      link.target = '_blank'
      link.rel = 'noopener noreferrer'
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
    }
  }

  if (loading) {
    return (
      <div className="card">
        <div className="animate-pulse">
          <div className="h-6 bg-line rounded mb-4"></div>
          <div className="space-y-4">
            {[...Array(3)].map((_, i) => (
              <div key={i} className="h-24 bg-line rounded-2xl"></div>
            ))}
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="card text-center">
        <div className="text-bad mb-4">
          <Cloud className="h-12 w-12 mx-auto mb-2" />
          <h3 className="text-lg font-semibold">we couldn&apos;t fetch the forecast</h3>
          <p className="text-subtext">check your connection or try again.</p>
        </div>
        <button onClick={onRetry} className="btn-primary flex items-center gap-2 mx-auto">
          <RefreshCw className="h-4 w-4" />
          try again
        </button>
      </div>
    )
  }

  if (windows.length === 0) {
    return (
      <div className="card text-center">
        <div className="text-subtext mb-4">
          <Sun className="h-12 w-12 mx-auto mb-2" />
          <h3 className="text-lg font-semibold">no stellar windows in that range</h3>
          <p>here&apos;s the closest match and why.</p>
        </div>
      </div>
    )
  }

  return (
    <div className="card">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-xl font-semibold text-text">best beach windows</h2>
        {location && (
          <div className="text-sm text-subtext">
            for {getClosestBeachName()}
          </div>
        )}
      </div>
      
      <motion.div 
        className="space-y-4"
        initial="hidden"
        animate="visible"
        variants={{
          hidden: { opacity: 0 },
          visible: {
            opacity: 1,
            transition: {
              staggerChildren: 0.1
            }
          }
        }}
      >
        {windows.map((window, index) => (
          <motion.div 
            key={index} 
            className="border border-line rounded-2xl p-6 hover:shadow-coastal transition-shadow"
            variants={{
              hidden: { opacity: 0, y: 20 },
              visible: { opacity: 1, y: 0 }
            }}
            transition={{ duration: 0.5, ease: "easeOut" }}
          >
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <span className="text-2xl">{getWeatherIcon(window.summary.cloudPct, window.summary.tempF)}</span>
                <div>
                  <div className="font-semibold text-text">
                    {formatDate(window.start)} ‚Ä¢ {formatTime(window.start)}‚Äì{formatTime(window.end)}
                  </div>
                  <div className="text-sm text-subtext">
                    {window.reasons.slice(0, 2).join(' ‚Ä¢ ')}
                  </div>
                </div>
              </div>
              <button
                onClick={() => addToGoogleCalendar(window, getClosestBeachName())}
                className="flex items-center gap-1 px-3 py-1.5 text-xs text-subtext hover:text-primary transition-colors duration-200 rounded-md hover:bg-primary/5"
                title="Add to Google Calendar"
              >
                <Calendar className="h-3 w-3" />
                add to calendar
              </button>
            </div>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              <div className="flex items-center gap-2">
                <Thermometer className="h-4 w-4 text-subtext" />
                <span className="font-medium">{window.summary.tempF}¬∞f</span>
              </div>
              <div className="flex items-center gap-2">
                <Sun className="h-4 w-4 text-subtext" />
                <span className="font-medium">uv {window.summary.uv}</span>
              </div>
              <div className="flex items-center gap-2">
                <Wind className="h-4 w-4 text-subtext" />
                <span className="font-medium">{window.summary.windMph} mph</span>
              </div>
              <div className="flex items-center gap-2">
                <Cloud className="h-4 w-4 text-subtext" />
                <span className="font-medium">{window.summary.cloudPct}%</span>
              </div>
            </div>
            
            {/* Water temperature and wave height for swim/surf modes */}
            {(window.summary.waterTempF || window.summary.waveHeightFt) && (
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mt-3 pt-3 border-t border-line">
                {window.summary.waterTempF && (
                  <div className="flex items-center gap-2">
                    <div className="h-4 w-4 text-subtext">üåä</div>
                    <span className="font-medium">{window.summary.waterTempF}¬∞f water</span>
                  </div>
                )}
                {window.summary.waveHeightFt && (
                  <div className="flex items-center gap-2">
                    <div className="h-4 w-4 text-subtext">üèÑ</div>
                    <span className="font-medium">{window.summary.waveHeightFt} ft waves</span>
                  </div>
                )}
              </div>
            )}
            
            
            {window.reasons.length > 2 && (
              <div className="mt-3 text-xs text-subtext">
                {window.reasons.slice(2).join(' ‚Ä¢ ')}
              </div>
            )}
          </motion.div>
        ))}
      </motion.div>
    </div>
  )
}
